//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include schdangler schmap
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class ProfLevel
   int levelnum
   string levelname
   string description
//////////////////////////////////////////////////////////////////////////////////////////
class CoreCompetency
   string name
   map<int, ProfLevel> proflevels
   int index
   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class Tool

   string name
   
   // with a bunch of examples
   vector<string> examples
   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class TaskCluster
   string name
//////////////////////////////////////////////////////////////////////////////////////////
class TaskClusterGroup
   
   string name
   
   nameschmap<TaskCluster> clusters
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class Tag
   string name
   eostri type;
   int vecindex
   int frequency
      // total times it was found
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class SpecialistTask
   string desc
   TaskCluster * cluster
   TaskClusterGroup * clustergroup
   int percent_time
   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class OccupationReq
   CoreCompetency * compe;
   ProfLevel * prole;
   int levelnum;
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class OccTag
   Tag * tag
   int percentage
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class OccLink
   int score // lower is better
   Occupation * a
   Occupation * b
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class OccDifference
   bool calculated = false
   
   // percentages
   int core_difference = 0
   int tool_commonality = 0
   int task_commonality = 0
   int knowledge_commonality = 0
   int ability_commonality = 0
   int skill_commonality = 0
   
   int score
   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class OccLinkFinal
   Occupation * origin
   Occupation * target
   int score = 0
   float visscore = 0
      // sorely by order
   
   OccDifference diffo
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class Occupation
   
   int occindex
      // for graph purposes. index in the alphabetical map
      
   int occ_rr_index
      // occ requirement rank vector position
   
   int occucode // 4 digit number, or 6 for the specialized ones
   
   string name
   string description
   
   //map<string, OccupationReq> reqs; // competency reqs
   vector<OccupationReq> reqs;
   vector<int> reqints
   int total_level_req = 0;
   
   vector<SpecialistTask> tasks
   
   vector<Tool*> used_tools
      // HR software, lol
   vector<int> state_percs
      // to be honest, don't really care about htis right now..
   vector<OccTag> tags
   
   int average_age = 0
   int average_fulltime_hours = 0
   int employee_size = 0;
   int fulltime_share = 0; // simple percentage number
   int gendershare_female = 0;
   int weeklypay_dollars = 0;
   
   int future_growth = 0; // levels
   int skill_level = 0;
   
   
   // only 20 best or something
   // lower is better, so the index is negative I guess
   multimap<int, OccLink> occlinks_forsort
   vector<OccLinkFinal> occlinks

   /\/ uNSORTED /\/

      sync(GhClient& cli, JobAnalysis& joba);
      gatherNearby(set<Occupation*>& ret, int depth);
      add(OccLink lelink);
      syncLinks();
      // calcDifference(Occupation& rhs) -> int;
      calcDifference(Occupation& rhs) -> OccDifference;
      youthFriendly() -> bool;

   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
class Env
   
   schmap<int, Occupation> occupations
      // based on code
   nameschmap<CoreCompetency> corecomps
   
   nameschmap<TaskClusterGroup> clustergroups
   
   map<pair<eostri, string>, Tag> tags
   vector<Tag*> tagvec
   
   map<string, int> statemap
      // state index   
   
   nameschmap<Tool> tools
   
   vector<Occupation*> occ_requirement_rank;
      // sorted from least point intensive to most point intensive
   vector<CoreCompetency*> compvec
      // sorted by alphabetical. there's only 10 of them anyways

   /\/ uNSORTED /\/

      Env();
      competency(const string& thestr) -> CoreCompetency&;
      load();
      checkLevels();
      postProcess();
      syncGraph();

   
//////////////////////////////////////////////////////////////////////////////////////////
DECLschdangler(env, Env);
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
