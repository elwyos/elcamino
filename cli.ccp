//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#bodinc model
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
GhClient/GhClient()
   corelevels.resize(env->compvec.size());
   
   \sloop corelevels
      moo = 5; // let's start with 2 everywhere
      
   \sloop env->occ_requirement_rank
      auto& joba = analyses.emplace_back();
      joba.occ = moo;
   
//////////////////////////////////////////////////////////////////////////////////////////
GhClient/taskProficiency(TaskCluster * cluster) -> int
   auto it = abilities.find(cluster);
   \if it == abilities.end()
      return 0;
   return it->second;
//////////////////////////////////////////////////////////////////////////////////////////
GhClient/getJobba(Occupation * occ) -> JobAnalysis&
   
   assert(occ->occ_rr_index > 0 && occ->occ_rr_index < analyses.size());
   auto& ret = analyses[occ->occ_rr_index];
   
   return ret; // yeah
   
   
//////////////////////////////////////////////////////////////////////////////////////////
GhClient/unsyncAnal()
   anal_synced = false;
//////////////////////////////////////////////////////////////////////////////////////////
GhClient/syncRecommendations()
   
   \if anal_synced
      return;
      
   anal_synced = true;
   
   \assert analyses.size() == env->occ_requirement_rank.size()

   
   sortedanal.clear();
         
   \sloop analyses, moo
      moo.occ->sync(*this, moo);
      sortedanal.push_back(&moo);
   
   
   sort(sortedanal.begin(), sortedanal.end(), [](auto * a, auto * b){
      return a->final_score < b->final_score;
   });
   
   \sloop sortedanal, moo, counta
      moo->result_index = counta;
      
      
   
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
